# this is the build file for project
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.30.0)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON) # For clang-tidy.
set(BUILD_SHARED_LIBS ON) # We expect external libraries to be linked statically.

set(CMAKE_C_COMPILER "clang")
set(CMAKE_CXX_COMPILER "clang++")
set(CMAKE_CXX_STANDARD 26) # Compile as C++17.
set(CMAKE_CXX_STANDARD_REQUIRED ON) # Require C++17 support.
project(cosh LANGUAGES CXX)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Setting build type to `Debug` as none was specified.")
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Ctest
enable_testing()

# Compiler flags.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -m64")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -stdlib=libc++ -Wno-c++26-extensions")

# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Werror")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")

# Output directory.
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Includes.
set(SRC_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/src/include)
set(TEST_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/test/include)
set(THIRD_PARTY_INCLUDE_DIR
    ${PROJECT_SOURCE_DIR}/third_party/fmt/include
    ${PROJECT_SOURCE_DIR}/third_party/spdlog/include

    # ${PROJECT_SOURCE_DIR}/third_party/stdexec/include
)
include_directories(${SRC_INCLUDE_DIR} ${TEST_INCLUDE_DIR})
include_directories(${THIRD_PARTY_INCLUDE_DIR} SYSTEM)

# Definitions.
add_compile_definitions(SPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_TRACE)

# add_compile_definitions(SPDLOG_FMT_EXTERNAL=1)
# #####################################################################################################################
# Other CMake modules
# MUST BE ADDED AFTER CONFIGURING COMPILER PARAMETERS
# #####################################################################################################################
include(${CMAKE_BINARY_DIR}/conan_toolchain.cmake)

# 查找conan的库并包含头文件
function(check_library_found LIB_NAME)
    find_package(${LIB_NAME} CONFIG REQUIRED)

    if(${LIB_NAME}_FOUND)
        include_directories(SYSTEM ${${LIB_NAME}_INCLUDE_DIRS})
    else()
        message(FATAL_ERROR "${LIB_NAME} not found")
    endif()
endfunction()

function(check_libs_found)
    foreach(LIB_NAME ${ARGN})
        check_library_found(${LIB_NAME})
    endforeach()
endfunction()

check_libs_found(Catch2 cJSON fakeit cppzmq)

add_subdirectory(src)
add_subdirectory(third_party)
add_subdirectory(test)
